// User function Template for C++

class Solution{
public:
   bool isPalindrome(const string& str, int start, int end) {
    while (start < end) {
        if (str[start] != str[end]) {
            return false;
        }
        start++;
        end--;
    }
    return true;
}
    int palindromicPartition(string str)
    {
       int n = str.length();
    vector<int> minCuts(n, 0);
    vector<vector<bool>> isPalindrome(n, vector<bool>(n, false));

    for (int end = 0; end < n; end++) {
        int minCutsEnd = end;
        for (int start = 0; start <= end; start++) {
            if (str[start] == str[end] && (end - start <= 1 || isPalindrome[start + 1][end - 1])) {
                isPalindrome[start][end] = true;
                minCutsEnd = (start == 0) ? 0 : min(minCutsEnd, minCuts[start - 1] + 1);
            }
        }
        minCuts[end] = minCutsEnd;
    }

    return minCuts[n - 1];
    }
};